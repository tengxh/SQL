/* [Robinhood - Easy] Assume you are given the below tables for trades and users. Write a query to list the top 3 cities which had the highest number of completed orders. */ 

SELECT u.city AS city, COUNT(*) AS completed_orders
FROM trades AS t
JOIN users AS u
ON t.user_id = u.user_id
GROUP BY u.city
HAVING t.status='complete'
ORDER BY completed_orders DESC
LIMIT 3;

/* [Facebook - Easy] Assume you have the below events table on app analytics. Write a query to get the click-through rate per app in 2019. */ 
/*assume that click thru rate = no of click thru / no of impressions */

SELECT e1.app_id, e1.click_count/e1.impression_count AS click_thru_rate
FROM
(SELCT e.app_id, 
SUM(CASE WHEN e.event_id = 'impression' THEN 1 ELSE 0 END) AS impression_count,
SUM(CASE WHEN e.event_id = 'click' THEN 1 ELSE 0 END) AS click_count,
FROM events AS e
GROUP BY e.app_id
HAVING YEAR(timestamp) = 2019) AS e1;

/* NTS: Dont need subquery too, can just calculate the click thru rate via one query too */ 

/* [Uber - Easy] Assume you are given the below table for spending activity by product type. 
Write a query to calculate the cumulative spend for each product over time in chronological order. */ 

SELECT t.date, t.pdt_count
SUM(t.pdt_count) over (order by t.date)
FROM
(SELECT date, count(order_id) AS pdt_count
FROM total_trans AS tt
GROUP BY date, product_id) AS t; 

/* [Facebook - Easy] Assume you are given the below tables on users and user posts. Write a query to get the distribution of the number of posts per user.
*/ 

SELECT date, user_id, COUNT(*) count_per_user_per_day
FROM posts AS p
GROUP BY user_id,date;

SELECT user_id, COUNT(*)
FROM posts 
GROUP BY user_id

/* [Opendoor - Easy] Assume you are given the below table on house prices from various zip codes that have been listed. 
Write a query to get the top 5 zip codes by market share of house prices for any zip code with at least 10000 houses. */

SELECT DISTINCT h.zip_code, (h.sum_price/(SELECT SUM(price) FROM housing)) AS share
FROM
(SELECT zip_code, price, COUNT(zip_code) OVER(PARTITION BY zip_code) AS count, 
 SUM(price) OVER(PARTITION BY zip_code) sum_price
FROM housing) AS h
WHERE count >=100000
ORDER BY share
LIMIT 5;

/* [Etsy - Easy] Assume you are given the below table on transactions from users for purchases. 
Write a query to get the list of customers where their earliest purchase was at least $50. */

SELECT user_id, MIN(spend)
FROM user_transactions AS ut
GROUP BY user_id
HAVING MIN(spend)>=50;

/* [Twitter - Easy] Assume you are given the below table on tweets by each user over a period of time. 
Calculate the 7-day rolling average of tweets by each user for every date. */ 

SELECT *,
      avg(t.no_of_tweets) OVER(
          PARTITION BY user_id 
          ORDER BY tweet_date
          ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) 
          AS 7day_moving_average
FROM 
(SELECT *, COUNT(tweet_id) OVER(PARTITION BY user_id) AS no_of_tweets FROM tweets) AS t;

/* [Stitch Fix - Easy]  Assume you are given the below table on transactions from users. 
Write a query to get the number of users and total products bought per latest transaction date where each user is bucketed into their latest transaction date. */ 

SELECT user_id, SUM(spend)
FROM user_transactions AS t1
WHERE (t1.user_id, t1.transaction_date) IN 
(SELECT user_id,transaction_date FROM
(SELECT *, (dense_rank() OVER(PARTITION BY user_id ORDER BY transaction_date DESC)) AS position 
FROM user_transactions) AS t
WHERE t.position = 1)
GROUP BY user_id; 

/* [Amazon - Easy] Assume you are given the below table on customer spend amounts on products in various categories. 
Calculate the top three most bought item within each category in 2020. */
 
SELECT p2.product_id FROM
(SELECT p1.product_id, row_number() over(partition by (p1.category_id, p1.product_id) order by p1.count DESC) AS count_rank
FROM 
(SELECT p.category_id, p.product_id, COUNT(*) AS count
FROM product_spend AS p
GROUP BY p.product_id
HAVING year(transaction_date)=2020) AS p1) AS p2
WHERE p2.count_rank <= 3;



