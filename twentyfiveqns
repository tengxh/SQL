/* codes contains my SQL queries for questions from https://towardsdatascience.com/twenty-five-sql-practice-exercises-5fc791e24082 
Language: MySQL */

///////* 1) Cancellation Rates - a query to return the publication and cancellation rate for each user *////////////
/* Step 1 - Create tables */
CREATE TABLE users (user_id INT, 
                    action VARCHAR(10), 
                    date DATE) ;

INSERT INTO users 
(user_id, action, date) 
VALUES (1,'start','01-01-20'),
(1,'cancel', ('01-02-20')),
(1,'cancel', ('01-02-20')), 
(2,'start', ('01-03-20')), 
(2,'publish', ('01-04-20')), 
(3,'start', ('01-05-20')), 
(3,'cancel', ('01-06-20')), 
(1,'start', ('01-07-20')), 
(1,'publish', ('01-08-20'));

/* Step 2 - Create output */ 
SELECT u.user_id, u.publish_count/u.start_count AS publish_rate, u.cancel_count/u.start_count AS cancel_rate
FROM (SELECT user_id, 
SUM(CASE WHEN action = 'start' THEN 1 ELSE 0 END) AS start_count,
SUM(CASE WHEN action = 'publish' THEN 1 ELSE 0 END) AS publish_count,
SUM(CASE WHEN action = 'cancel' THEN 1 ELSE 0 END) AS cancel_count
FROM users
GROUP BY user_id) AS u;

///////* 2) Changes in net worth - write a query to return the change in net worth for each user, ordered by decreasing net change. *////////////
/* Step 1 - Create tables */
CREATE TABLE transactions 
(sender INT, receiver INT, amount INT, date DATE) ;

INSERT INTO transactions 
(sender,receiver,amount,date) 
VALUES (5, 2, 10,'12-2-20'),
(1, 3, 15, '13-2-20'), 
(2, 1, 20,'13-2-20'), 
(2, 3, 25, '14-2-20'), 
(3, 1, 20, '15-2-20'), 
(3, 2, 15,'15-2-20'), 
(1, 4, 5, '16-2-20');

/* Step 2 - Create output */ 
/*complete in one query - 

SELECT r.receiver, r.income-r.outflow AS net_change FROM
(SELECT i.receiver, IFNULL(i.inflow,0) AS income, IFNULL(o.outflow,0) AS outflow
FROM (SELECT receiver, SUM(amount) AS inflow
FROM transactions
GROUP BY receiver) AS i
LEFT OUTER JOIN (SELECT sender, SUM(amount) AS outflow
FROM transactions
GROUP BY sender) AS o
ON i.receiver=o.sender

UNION

SELECT o.sender, IFNULL(i.inflow,0) AS income, IFNULL(o.outflow,0) AS outflow
FROM (SELECT receiver, SUM(amount) AS inflow
FROM transactions
GROUP BY receiver) AS i
RIGHT OUTER JOIN (SELECT sender, SUM(amount) AS outflow
FROM transactions
GROUP BY sender) AS o
ON i.receiver=o.sender) AS r
ORDER BY (net_change) DESC;


///////* 3) Most frequent items - write a query to return the most frequent item ordered on each date. Return multiple items in the case of a tie. *///
CREATE TABLE items 
(date DATE, item VARCHAR(20)) ;

INSERT INTO items 
(date,item) 
VALUES (('01-01-20'),'apple'), 
(('01-01-20'),'apple'), 
(('01-01-20' ),'pear'), 
(('01-01-20'),'pear'), 
(('01-02-20'),'pear'), 
(('01-02-20'),'pear'), 
(('01-02-20'),'pear'), 
(('01-02-20'),'orange');


CREATE TABLE temp AS (SELECT date,item, COUNT(*) AS count
FROM items
GROUP BY date, item);

CREATE TABLE temp1 AS (SELECT t.date, MAX(t.count) AS count
FROM temp AS t
GROUP BY date);

SELECT temp1.date, temp1.count, temp.item 
FROM temp1
JOIN temp
ON temp1.date=temp.date AND temp1.count=temp.count;


///////* 4) Time difference between latest actions- a query to return for each user the time elapsed between the last action and the second-to-last action, in ascending order by user ID *////////////

INSERT INTO user 
(user_id, action, date) 
VALUES (1, 'start', '20-2-12'), 
(1, 'cancel', '20-2-13'), 
(2, 'start', '20-2-11'), 
(2, 'publish', '20-2-14'), 
(3, 'start', '20-2-15'), 
(3, 'cancel', '20-2-15'), 
(4, 'start', '20-2-18'), 
(1, 'publish', '20-2-19' );

          
CREATE TABLE user2 AS
(SELECT *  FROM
(SELECT u.*, row_number() OVER(PARTITION BY user_id ORDER BY date DESC) AS seq
FROM user AS u) AS u1
HAVING u1.seq<3);

SELECT u4.user_id, u4.lagged_date-u4.date AS days_elapsed
FROM
(SELECT u3.*, LAG(date) OVER(PARTITION BY user_id ORDER BY date DESC) AS lagged_date
FROM user2 AS u3) AS u4
INNER JOIN (SELECT user2.user_id, MAX(user2.seq) AS seq
FROM user2
GROUP BY user2.user_id) AS u5
ON u5.user_id = u4.user_id AND u5.seq=u4.seq
;

///////* 5)  Super users - A company defines its super users as those who have made at least two transactions.
write a query to return, for each user, the date when they become a super user, ordered by oldest super users first. 
Users who are not super users should also be present in the table.
*////////////

CREATE TABLE superuser 
(user_id INT, product_id INT, date DATE) ;

INSERT INTO superuser 
(user_id, product_id, date) 
VALUES (1, 101, '20-2-12'), 
(2, 105, '20-2-13-20'), 
(1, 111, '20-2-14-20' ), 
(3, 121, '20-2-15-20'), 
(1, 101, '20-2-16-20'), 
(2, 105, '20-2-17-20' ),
(4, 101, '20-2-16-20'), 
(3, 105, '20-2-15-20');


SELECT su1.user_id, su1.superuser_date FROM
(SELECT su.user_id, su.times, 
CASE WHEN su.times>=2 AND su.times1=2 THEN su.date ELSE NULL END AS superuser_date
FROM (SELECT superuser.*, COUNT(*) OVER(PARTITION BY user_id) AS times, 
      row_number() OVER(PARTITION BY user_id ORDER BY date) AS times1
FROM superuser) AS su) AS su1
WHERE (su1.superuser_date IS NOT NULL AND su1.times>=2) OR 
(su1.superuser_date IS NULL AND su1.times<2)
ORDER BY su1.superuser_date;

///////* 6)  Content recommendation (hard) - Using the following two tables, 
write a query to return page recommendations to a social media user based on the pages that their friends have liked, 
but that they have not yet marked as liked. Order the result by ascending user ID
*////////////
CREATE TABLE friends 
(user_id INT, friend INT) ;

INSERT INTO friends 
(user_id, friend) 
VALUES(1, 2), (1, 3), (1, 4), (2, 1), (3, 1), (3, 4), (4, 1), (4, 3);

CREATE TABLE likes 
(user_id INT, page_likes VARCHAR(1)) ;

INSERT INTO likes 
(user_id, page_likes) 
VALUES(1, 'A'), (1, 'B'), (1, 'C'), (2, 'A'), (3, 'B'), (3, 'C'), (4, 'B');

SELECT DISTINCT f2.user_id, f2.page_likes AS recommended_page FROM 
(SELECT *
FROM 
(SELECT f.friend, f.user_id, l.page_likes
FROM friends AS f
INNER JOIN likes AS l
ON f.friend = l.user_id) AS f1
WHERE NOT EXISTS (SELECT * FROM likes AS l1
                 WHERE l1.user_id=f1.user_id AND l1.page_likes=f1.page_likes)) AS f2;

///////* 7)  Mobile and web visitors - With the following two tables, return the fraction of users who only visited mobile, only visited web, and visited both. */////
CREATE TABLE mobile 
(user_id INT, page_url VARCHAR(1)) ;

INSERT INTO mobile 
(user_id, page_url) 
VALUES(1, 'A'), (2, 'B'), (3, 'C'), (4, 'A'), (9, 'B'), (2, 'C'), (10, 'B');

CREATE TABLE web 
(user_id INT, page_url VARCHAR(1)) ;

INSERT INTO web 
(user_id, page_url) 
VALUES(6, 'A'), (2, 'B'), (3, 'C'), (7, 'A'), (4, 'B'), (8, 'C'), (5, 'B');

ALTER TABLE mobile  
ADD type VARCHAR(10) NOT NULL DEFAULT "mobile";

ALTER TABLE web  
ADD type VARCHAR(10) NOT NULL DEFAULT "web";

CREATE TABLE visitors AS
(SELECT DISTINCT visitors1.user_id, CASE WHEN visitors1.count=2 THEN "both" ELSE visitors1.type END AS type1
FROM
(SELECT visitors.user_id, visitors.type, COUNT(*) OVER(PARTITION BY user_id) AS count
FROM (SELECT DISTINCT user_id,type FROM web UNION SELECT user_id,type  FROM mobile) AS visitors) AS visitors1);


SELECT visits1.publish_count/u.start_count AS publish_rate, u.cancel_count/u.start_count AS cancel_rate
FROM (SELECT type1,
SUM(CASE WHEN type1 = 'mobile' THEN 1 ELSE 0 END) AS mobile_count,
SUM(CASE WHEN type1 = 'web' THEN 1 ELSE 0 END) AS web_count,
SUM(CASE WHEN type1 = 'both' THEN 1 ELSE 0 END) AS both_count
FROM visitors
GROUP BY type1) AS visits;

SELECT v2.type1, v2.count/SUM(v2.count) OVER() AS total_count
FROM
(SELECT v1.type1, SUM(v1.count) AS count FROM
(SELECT visitors.*, 1 AS count
FROM visitors) AS v1
GROUP BY v1.type1) AS v2
GROUP BY v2.type1;

//* though end format is a little different from what is required!! :X *//

//////* 8) Upgrade rate by product action (hard)

//////* 9) Most friended
Return a list of users and their corresponding friend count. 
Order the result by descending friend count, and in the case of a tie, by ascending user ID. Assume that only unique friendships are displayed *//
CREATE TABLE friends
(user1 INT, user2 INT);

INSERT INTO friends (user1, user2) 
VALUES (1, 2), (1, 3), (1, 4), (2, 3);

CREATE TABLE  temp AS
(SELECT user1 AS user_id
FROM friends
UNION ALL
SELECT user2 AS user_id
FROM friends);

SELECT user_id, count(*) AS friend_count
FROM temp
GROUP BY user_id
ORDER BY friend_count DESC;


//////* 10) Project aggregation (hard) - NOT MY SOLUTION - TOOK REF FROM HACKERRANK FORUM ANSWERS!!! (hellosolvur)
The projects table contains three columns: task_id, start_date, and end_date. 
The difference between end_date and start_date is 1 day for each row in the table. 
If task end dates are consecutive they are part of the same project. Projects do not overlap.
Write a query to return the start and end dates of each project, and the number of days it took to complete. 
Order by ascending project duration, and descending start date in the case of a tie. *//

CREATE TABLE projects
(task_id INT, start_date date, end_date date);

INSERT INTO projects (task_id, start_date,end_date)
VALUES
(1, '20-10-01', '20-10-02'), 
(2, '20-10-02', '20-10-03'), 
(3, '20-10-03','20-10-04' ), 
(4, '20-10-13','20-10-14' ), 
(5, '20-10-14' , '20-10-15'), 
(6, '20-10-28', '20-10-29'), 
(7, '20-10-30', '20-10-31');

SELECT Start_Date, MIN(End_Date), datediff(MIN(end_date),start_date)
FROM 
/* Choose start dates that are not end dates of other projects (if a start date is an end date, it is part of the same project) */
    (SELECT start_date FROM projects WHERE start_date NOT IN (SELECT end_date FROM projects)) a,
/* Choose end dates that are not end dates of other projects */
    (SELECT end_date FROM projects WHERE end_date NOT IN (SELECT start_date FROM projects)) b
/* At this point, we should have a list of start dates and end dates that don't necessarily correspond with each other */
/* This makes sure we only choose end dates that fall after the start date, and choosing the MIN means for the particular start_date, 
we get the closest end date that does not coincide with the start of another task */
where start_date < end_date
GROUP BY start_date
/* min (end_date) = the minium end date within each same start date group. thus find date diff with this min end date */
ORDER BY datediff(start_date, MIN(end_date)) DESC, start_date;


//////* 11) Birthday attendance
Given the following two tables, write a query to return the fraction of students, rounded to two decimal places, who attended school
(attendance = 1) on their birthday. */// 

CREATE TABLE attendance
(student_id INT, school_date date, attendance INT);

INSERT INTO attendance (student_id, school_date, attendance)
VALUES
(1, '2020-04-03', 0),
(2, '2020-04-03', 1),
(3, '2020-04-03', 1), 
(1, '2020-04-04', 1), 
(2, '2020-04-04', 1), 
(3, '2020-04-04' , 1), 
(1, '2020-04-05', 0), 
(2, '2020-04-05' , 1), 
(3, '2020-04-05' , 1), 
(4,  '2020-04-05' , 1);

CREATE TABLE students
(student_id INT, school_id INT, grade_level INT, date_of_birth DATE);

INSERT INTO students (student_id, school_id, grade_level, date_of_birth)
VALUES
(1, 2, 5, '2012-04-03' ),
(2, 1, 4, '2013-04-04'),
(3, 1, 3, '2014-04-05'), 
(4, 2, 4, '2013-04-03');

/* extract month & date from attendance day */ 
SELECT ROUND(SUM(a1.attendance)/COUNT(*),2) FROM 
(SELECT a.*, CONCAT(MONTH(a.school_date),"-",DAY(a.school_date)) AS attend_sch
FROM attendance AS a) AS a1
JOIN (SELECT s.student_id, CONCAT(MONTH(s.date_of_birth),"-",DAY(s.date_of_birth)) AS bday 
            FROM students AS s) AS s1
ON s1.bday=a1.attend_sch AND s1.student_id = a1.student_id;


//////* 12) Hacker scores
Given the following two tables, write a query to return the hacker ID, name, and total score (the sum of maximum scores for each challenge completed) 
ordered by descending score, and by ascending hacker ID in the case of score tie. Do not display entries for hackers with a score of zero. *///

CREATE TABLE hackers 
(hacker_id INT, name VARCHAR(10)); 

INSERT INTO hackers (hacker_id, name)
VALUES
(1, 'John'),
(2, 'Jane'),
(3, 'Joe'),
(4, 'Jim');

CREATE TABLE submissions 
(submission_id INT,hacker_id INT, challenge_id INT, score INT); 

INSERT INTO submissions (submission_id, hacker_id, challenge_id, score)
VALUES
(101, 1, 1, 10),
(102, 1, 1, 12),
(103, 2, 1, 11),
(104, 2, 1, 9),
(105, 2, 2, 13),
(106, 3, 1, 9),
(107, 3, 2, 12),
(108, 3, 2, 15),
(109, 4, 1, 0);

SELECT t1.hacker_id,t1.name, SUM(t1.max_score) AS total_score
FROM
(SELECT s1.hacker_id, s1.max_score, h.name
FROM
(SELECT s.hacker_id, s.challenge_id, MAX(score) AS max_score
FROM submissions AS s
GROUP BY s.hacker_id, s.challenge_id) AS s1
JOIN hackers AS h
ON h.hacker_id=s1.hacker_id) AS t1
GROUP BY t1.hacker_id, t1.name
HAVING total_score>0
ORDER BY total_score DESC, t1.hacker_id;

/* qn 14 */

CREATE TABLE employee  
(id INT, pay_month INT, salary INT); 

INSERT employee 
(id, pay_month, salary)
VALUES
(1, 1, 20),
(2, 1, 20),
(1, 2, 30),
(2, 2, 30),
(3, 2, 40),
(1, 3, 40),
(3, 3, 60),
(1, 4, 60),
(3, 4, 70);

SELECT e.id, e.pay_month, e.salary, 
SUM(e.salary) OVER(PARTITION BY e.id ORDER BY e.pay_month) AS cumulative_sum
FROM (SELECT * FROM employee HAVING employee.pay_month<4)  AS e;

/* qn 15 - with guidance
Write a query to return the scores of each team in the teams table after all matches displayed in the matches table. 
Points are awarded as follows: zero points for a loss, one point for a tie, and three points for a win. 
The result should include team name and points, and be ordered by decreasing points. In case of a tie, order by alphabetized team name.*/

CREATE TABLE teams  
(team_id INT, team_name VARCHAR(20)); 

INSERT teams 
(team_id,team_name)
VALUES
(1, 'New York'),
(2, 'Atlanta'),
(3, 'Chicago'),
(4, 'Toronto'),
(5, 'Los Angeles'),
(6, 'Seattle');

CREATE TABLE matches  
(match_id INT, host_team INT, guest_team INT, host_goals INT, guest_goals INT); 

INSERT matches 
(match_id, host_team, guest_team, host_goals, guest_goals)
VALUES
(1, 1, 2, 3, 0),
(2, 2, 3, 2, 4),
(3, 3, 4, 4, 3),
(4, 4, 5, 1, 1),
(5, 5, 6, 2, 1),
(6, 6, 1, 1, 2);

CREATE TABLE points AS (SELECT m.*, 
CASE WHEN m.host_goals>m.guest_goals THEN 3 WHEN m.host_goals=m.guest_goals THEN 1 ELSE 0 END AS host_points , 
CASE WHEN m.host_goals<m.guest_goals THEN 3 WHEN m.host_goals=m.guest_goals THEN 1 ELSE 0 END AS guest_points 
FROM matches AS m);

SELECT t.team_name,p.host_points + p1.guest_points AS total_points
FROM teams AS t
JOIN points AS p
ON  p.host_team=t.team_id 
JOIN points AS p1
on p1.guest_team = t.team_id
ORDER BY total_points DESC;

/* qn 16 - with guidance
From the following table, write a query to display the ID and name of customers who bought products A and B, but didn’t buy product C, ordered by ascending customer ID.*/ 

CREATE TABLE customers  
(id INT, name VARCHAR(20)); 

INSERT customers 
(id,name)
VALUES
(1, 'Daniel'),
(2, 'Diana'),
(3, 'Elizabeth'),
(4, 'John');

CREATE TABLE orders  
(order_id INT, customer_id INT, product_name VARCHAR(1)); 

INSERT orders 
(order_id,customer_id,product_name)
VALUES
(1, 1, 'A'),
(2, 1, 'B'),
(3, 2, 'A'),
(4, 2, 'B'),
(5, 2, 'C'),
(6, 3, 'A'), 
(7, 3, 'A'),
(8, 3, 'B'),
(9, 3, 'D');

SELECT *
FROM customers AS c
WHERE c.id IN (SELECT DISTINCT o.customer_id
FROM orders AS o
WHERE o.product_name="A") AND
c.id IN (SELECT DISTINCT o1.customer_id
FROM orders AS o1
WHERE o1.product_name="B") AND
c.id NOT IN (SELECT DISTINCT o2.customer_id
FROM orders AS o2
WHERE o2.product_name="C")
ORDER BY c.id;


/* skip qn 17 and 18 since they are from hackerrank and i've tried it before */ 

/* qn 19 */ 

